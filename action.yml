name: "Semantic Release Action"
description: "Automatiza la creación de versiones y releases usando Semantic Release"
author: "titan85"
inputs:
  GITHUB_TOKEN:
    description: "GitHub Token para autenticación"
    required: true
  REPOSITORY_URL:
    description: "URL del repositorio en el que se ejecutará el release"
    required: true

runs:
  using: "composite"
  steps:
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Obtener el hash del commit utilizado
      id: get_commit
      run: echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
      env: 
        COMMIT_SHA: ${{ env.COMMIT_SHA }}
      shell: bash

    - name: Capture Version with Dry Run
      id: capture_version
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        version=$(npx semantic-release --dry-run | grep -oP '(?<=The next release version is )\d+\.\d+\.\d+' || echo "unknown version")
        echo "VERSION=$version" >> $GITHUB_ENV
      shell: bash

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install
      shell: bash

    - name: Run Semantic Release
      if: env.VERSION != 'versión desconocida'
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        DEBUG: semantic-release:*
      shell: bash

    - name: Create Issue on Failure
      if: failure()
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const version = process.env.VERSION || 'versión desconocida';
          const commitSHA = process.env.COMMIT_SHA || 'commit desconocido';
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: "open",
            labels: "release-failed"
          });

          const issueTitle = `Error en el release de la versión ${version}`;
          const issueExists = issues.some(issue => issue.title === issueTitle);

          if (!issueExists) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: `⚠️ **Se produjo un error durante el proceso de release**.\n\n` +
                    `Detalles del error:\n\n` +
                    `- Versión: ${version}\n` +
                    `- Commit: ${commitSHA}\n` +
                    `- Usuario que ejecutó: ${{ github.actor }}\n\n` +
                    `Por favor, revisa los logs para más detalles.`,
              labels: ["release-failed", "bug"]
            });
          }
